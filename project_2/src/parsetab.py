
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDR ARRCONT ARRINDL ARRINDR ATRIB BLOCK_END BLOCK_START CONDAND CONDOR DIF DIV DO ELSE EQ GEQ GREATER ID IF INSEND INT LEQ LESSER LPAREN MODULO MULT NOT NUMBER REF RETURN RPAREN STR STRING SUB SUM UNTIL VOID WHILEprogram : functionsfunctions :  functions : function functionsfunction : function_header function_code_outlinefunction_header : BLOCK_START func_type ID argument_list_headargument_list_head : LPAREN RPAREN argument_list_head : LPAREN arg_head args_head RPARENarg_head : data_type IDargs_head :  args_head : ARRCONT arg_head args_headfunction_code_outline : function_code BLOCK_ENDfunction_code :  function_code : declarations code_logic code_enddeclarations :  declarations : declaration declarationsdeclaration : data_type ID INSENDdeclaration : data_type ID ARRINDL expression ARRINDR INSENDcode_logic :  code_logic : atributionscode_logic : conditionalscode_logic : function_callsatributions : atribution code_logicatribution : ID ATRIB expression INSENDatribution : ID ATRIB cond_expression INSENDatribution : indarr ATRIB expression INSENDindarr : ID ARRINDL expression ARRINDRexpression : termexpression : expression ad_op termterm : factorterm : term mult_op factorfactor : NUMBERfactor : IDfactor : LPAREN expression RPARENfactor : NOT expressionfactor : SUB expressionfactor : call_functionfactor : indarrfactor : ADDR expressionad_op : SUMad_op : SUBmult_op : MULTmult_op : DIVmult_op : MODULOconditionals : conditional code_logicconditional : BLOCK_START WHILE cond_expression cond_codeconditional : BLOCK_START DO cond_code WHILE cond_expressionconditional : BLOCK_START UNTIL cond_expression cond_codeconditional : BLOCK_START DO cond_code UNTIL cond_expressionconditional : BLOCK_START IF cond_expression cond_codeconditional : BLOCK_START IF cond_expression cond_code BLOCK_START ELSE cond_codecond_expression : LPAREN expression RPARENcond_expression : LPAREN cond_expression bool_op cond_expression RPARENbool_op : EQbool_op : DIFbool_op : LEQbool_op : GEQbool_op : LESSERbool_op : GREATERbool_op : CONDANDbool_op : CONDORcond_code : code_logic BLOCK_ENDfunction_calls : call_function code_logiccall_function : ID args_lstargs_lst : LPAREN RPARENargs_lst : LPAREN arg args RPARENarg : expressionargs :  args : ARRCONT arg argsfunc_type : VOIDfunc_type : data_typedata_type : STRdata_type : INTdata_type : pointer data_typepointer : REFcode_end : RETURN INSENDcode_end : RETURN expression INSEND'
    
_lr_action_items = {'$end':([0,1,2,3,6,7,19,],[-2,0,-1,-2,-3,-4,-11,]),'BLOCK_START':([0,3,4,7,9,10,19,24,25,26,30,40,45,48,50,68,72,76,77,79,94,95,101,102,106,107,108,126,128,129,130,132,133,137,139,140,],[5,5,-14,-4,29,-14,-11,29,29,29,-15,-63,29,-16,-5,-64,29,29,29,-6,-23,-24,-25,-45,-61,-47,131,-65,-51,-46,-48,-17,-7,29,-52,-50,]),'BLOCK_END':([4,8,21,22,23,24,25,26,34,36,37,38,40,45,50,52,68,72,75,76,77,79,82,94,95,101,102,106,107,108,126,128,129,130,133,137,139,140,],[-12,19,-19,-20,-21,-18,-18,-18,-13,-22,-44,-62,-63,-18,-5,-75,-64,-18,106,-18,-18,-6,-76,-23,-24,-25,-45,-61,-47,-49,-65,-51,-46,-48,-7,-18,-52,-50,]),'ID':([4,9,10,11,12,13,16,17,18,24,25,26,30,32,35,39,40,41,42,43,45,48,49,50,58,59,60,63,66,68,72,73,76,77,79,81,83,84,85,86,87,88,89,94,95,100,101,102,106,107,108,126,128,129,130,132,133,137,139,140,],[-14,27,-14,31,-71,-72,33,-69,-70,27,27,27,-15,-73,57,57,-63,57,57,57,27,-16,57,-5,57,57,57,57,57,-64,27,57,27,27,-6,112,57,-39,-40,57,-41,-42,-43,-23,-24,57,-25,-45,-61,-47,-49,-65,-51,-46,-48,-17,-7,27,-52,-50,]),'RETURN':([4,9,10,20,21,22,23,24,25,26,30,36,37,38,40,48,50,68,79,94,95,101,102,106,107,108,126,128,129,130,132,133,139,140,],[-14,-18,-14,35,-19,-20,-21,-18,-18,-18,-15,-22,-44,-62,-63,-16,-5,-64,-6,-23,-24,-25,-45,-61,-47,-49,-65,-51,-46,-48,-17,-7,-52,-50,]),'STR':([4,5,10,14,15,48,50,51,79,111,132,133,],[12,12,12,12,-74,-16,-5,12,-6,12,-17,-7,]),'INT':([4,5,10,14,15,48,50,51,79,111,132,133,],[13,13,13,13,-74,-16,-5,13,-6,13,-17,-7,]),'REF':([4,5,10,14,15,48,50,51,79,111,132,133,],[15,15,15,15,-74,-16,-5,15,-6,15,-17,-7,]),'VOID':([5,],[17,]),'ATRIB':([27,28,98,],[39,43,-26,]),'ARRINDL':([27,31,57,],[41,49,41,]),'LPAREN':([27,33,35,39,41,42,43,44,46,47,49,57,58,59,60,63,66,73,83,84,85,86,87,88,89,100,104,105,117,118,119,120,121,122,123,124,125,],[42,51,58,66,58,58,58,73,73,73,58,42,58,58,58,58,66,66,58,-39,-40,58,-41,-42,-43,58,73,73,73,-53,-54,-55,-56,-57,-58,-59,-60,]),'WHILE':([29,74,106,],[44,104,-61,]),'DO':([29,],[45,]),'UNTIL':([29,74,106,],[46,105,-61,]),'IF':([29,],[47,]),'INSEND':([31,35,40,53,54,55,56,57,61,62,64,65,68,71,91,92,93,98,109,113,114,115,116,126,139,],[48,52,-63,82,-27,-29,-31,-32,-36,-37,94,95,-64,101,-34,-35,-38,-26,132,-28,-30,-33,-33,-65,-52,]),'NUMBER':([35,39,41,42,43,49,58,59,60,63,66,73,83,84,85,86,87,88,89,100,],[56,56,56,56,56,56,56,56,56,56,56,56,56,-39,-40,56,-41,-42,-43,56,]),'NOT':([35,39,41,42,43,49,58,59,60,63,66,73,83,84,85,86,87,88,89,100,],[59,59,59,59,59,59,59,59,59,59,59,59,59,-39,-40,59,-41,-42,-43,59,]),'SUB':([35,39,40,41,42,43,49,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,70,71,73,78,83,84,85,86,87,88,89,90,91,92,93,96,98,100,103,113,114,115,116,126,],[60,60,-63,60,60,60,60,85,-27,-29,-31,-32,60,60,60,-36,-37,60,85,60,85,-64,85,85,60,85,60,-39,-40,60,-41,-42,-43,85,85,85,85,85,-26,60,85,-28,-30,-33,-33,-65,]),'ADDR':([35,39,41,42,43,49,58,59,60,63,66,73,83,84,85,86,87,88,89,100,],[63,63,63,63,63,63,63,63,63,63,63,63,63,-39,-40,63,-41,-42,-43,63,]),'MULT':([40,54,55,56,57,61,62,68,91,92,93,98,113,114,115,116,126,],[-63,87,-29,-31,-32,-36,-37,-64,-34,-35,-38,-26,87,-30,-33,-33,-65,]),'DIV':([40,54,55,56,57,61,62,68,91,92,93,98,113,114,115,116,126,],[-63,88,-29,-31,-32,-36,-37,-64,-34,-35,-38,-26,88,-30,-33,-33,-65,]),'MODULO':([40,54,55,56,57,61,62,68,91,92,93,98,113,114,115,116,126,],[-63,89,-29,-31,-32,-36,-37,-64,-34,-35,-38,-26,89,-30,-33,-33,-65,]),'SUM':([40,53,54,55,56,57,61,62,64,67,68,70,71,78,90,91,92,93,96,98,103,113,114,115,116,126,],[-63,84,-27,-29,-31,-32,-36,-37,84,84,-64,84,84,84,84,84,84,84,84,-26,84,-28,-30,-33,-33,-65,]),'ARRINDR':([40,54,55,56,57,61,62,67,68,78,91,92,93,98,113,114,115,126,],[-63,-27,-29,-31,-32,-36,-37,98,-64,109,-34,-35,-38,-26,-28,-30,-33,-65,]),'ARRCONT':([40,54,55,56,57,61,62,68,69,70,80,91,92,93,98,112,113,114,115,126,127,134,],[-63,-27,-29,-31,-32,-36,-37,-64,100,-66,111,-34,-35,-38,-26,-8,-28,-30,-33,-65,100,111,]),'RPAREN':([40,42,51,54,55,56,57,61,62,68,69,70,80,90,91,92,93,96,98,99,103,110,112,113,114,115,116,126,127,128,134,135,136,138,139,],[-63,68,79,-27,-29,-31,-32,-36,-37,-64,-67,-66,-9,115,-34,-35,-38,116,-26,126,128,133,-8,-28,-30,-33,-33,-65,-67,-51,-9,139,-68,-10,-52,]),'EQ':([97,116,139,],[118,-51,-52,]),'DIF':([97,116,139,],[119,-51,-52,]),'LEQ':([97,116,139,],[120,-51,-52,]),'GEQ':([97,116,139,],[121,-51,-52,]),'LESSER':([97,116,139,],[122,-51,-52,]),'GREATER':([97,116,139,],[123,-51,-52,]),'CONDAND':([97,116,139,],[124,-51,-52,]),'CONDOR':([97,116,139,],[125,-51,-52,]),'ELSE':([131,],[137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'functions':([0,3,],[2,6,]),'function':([0,3,],[3,3,]),'function_header':([0,3,],[4,4,]),'function_code_outline':([4,],[7,]),'function_code':([4,],[8,]),'declarations':([4,10,],[9,30,]),'declaration':([4,10,],[10,10,]),'data_type':([4,5,10,14,51,111,],[11,18,11,32,81,81,]),'pointer':([4,5,10,14,51,111,],[14,14,14,14,14,14,]),'func_type':([5,],[16,]),'code_logic':([9,24,25,26,45,72,76,77,137,],[20,36,37,38,75,75,75,75,75,]),'atributions':([9,24,25,26,45,72,76,77,137,],[21,21,21,21,21,21,21,21,21,]),'conditionals':([9,24,25,26,45,72,76,77,137,],[22,22,22,22,22,22,22,22,22,]),'function_calls':([9,24,25,26,45,72,76,77,137,],[23,23,23,23,23,23,23,23,23,]),'atribution':([9,24,25,26,45,72,76,77,137,],[24,24,24,24,24,24,24,24,24,]),'conditional':([9,24,25,26,45,72,76,77,137,],[25,25,25,25,25,25,25,25,25,]),'call_function':([9,24,25,26,35,39,41,42,43,45,49,58,59,60,63,66,72,73,76,77,83,86,100,137,],[26,26,26,26,61,61,61,61,61,26,61,61,61,61,61,61,26,61,26,26,61,61,61,26,]),'indarr':([9,24,25,26,35,39,41,42,43,45,49,58,59,60,63,66,72,73,76,77,83,86,100,137,],[28,28,28,28,62,62,62,62,62,28,62,62,62,62,62,62,28,62,28,28,62,62,62,28,]),'code_end':([20,],[34,]),'args_lst':([27,57,],[40,40,]),'argument_list_head':([33,],[50,]),'expression':([35,39,41,42,43,49,58,59,60,63,66,73,100,],[53,64,67,70,71,78,90,91,92,93,96,103,70,]),'term':([35,39,41,42,43,49,58,59,60,63,66,73,83,100,],[54,54,54,54,54,54,54,54,54,54,54,54,113,54,]),'factor':([35,39,41,42,43,49,58,59,60,63,66,73,83,86,100,],[55,55,55,55,55,55,55,55,55,55,55,55,55,114,55,]),'cond_expression':([39,44,46,47,66,73,104,105,117,],[65,72,76,77,97,97,129,130,135,]),'arg':([42,100,],[69,127,]),'cond_code':([45,72,76,77,137,],[74,102,107,108,140,]),'arg_head':([51,111,],[80,134,]),'ad_op':([53,64,67,70,71,78,90,91,92,93,96,103,],[83,83,83,83,83,83,83,83,83,83,83,83,]),'mult_op':([54,113,],[86,86,]),'args':([69,127,],[99,136,]),'args_head':([80,134,],[110,138,]),'bool_op':([97,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> functions','program',1,'p_program','proj_nqc_parser.py',19),
  ('functions -> <empty>','functions',0,'p_functions_1','proj_nqc_parser.py',28),
  ('functions -> function functions','functions',2,'p_functions_2','proj_nqc_parser.py',36),
  ('function -> function_header function_code_outline','function',2,'p_function','proj_nqc_parser.py',41),
  ('function_header -> BLOCK_START func_type ID argument_list_head','function_header',4,'p_function_header','proj_nqc_parser.py',46),
  ('argument_list_head -> LPAREN RPAREN','argument_list_head',2,'p_argument_list_head_1','proj_nqc_parser.py',75),
  ('argument_list_head -> LPAREN arg_head args_head RPAREN','argument_list_head',4,'p_argument_list_head_2','proj_nqc_parser.py',79),
  ('arg_head -> data_type ID','arg_head',2,'p_arg_head','proj_nqc_parser.py',84),
  ('args_head -> <empty>','args_head',0,'p_args_head_1','proj_nqc_parser.py',102),
  ('args_head -> ARRCONT arg_head args_head','args_head',3,'p_args_head_2','proj_nqc_parser.py',106),
  ('function_code_outline -> function_code BLOCK_END','function_code_outline',2,'p_function_code_outline','proj_nqc_parser.py',112),
  ('function_code -> <empty>','function_code',0,'p_function_code_1','proj_nqc_parser.py',117),
  ('function_code -> declarations code_logic code_end','function_code',3,'p_function_code_2','proj_nqc_parser.py',121),
  ('declarations -> <empty>','declarations',0,'p_declarations_1','proj_nqc_parser.py',127),
  ('declarations -> declaration declarations','declarations',2,'p_declarations_2','proj_nqc_parser.py',131),
  ('declaration -> data_type ID INSEND','declaration',3,'p_declaration_1','proj_nqc_parser.py',137),
  ('declaration -> data_type ID ARRINDL expression ARRINDR INSEND','declaration',6,'p_declaration_2','proj_nqc_parser.py',162),
  ('code_logic -> <empty>','code_logic',0,'p_code_logic','proj_nqc_parser.py',191),
  ('code_logic -> atributions','code_logic',1,'p_code_logic_atr','proj_nqc_parser.py',194),
  ('code_logic -> conditionals','code_logic',1,'p_code_logic_cond','proj_nqc_parser.py',197),
  ('code_logic -> function_calls','code_logic',1,'p_code_logic_func','proj_nqc_parser.py',200),
  ('atributions -> atribution code_logic','atributions',2,'p_atributions','proj_nqc_parser.py',205),
  ('atribution -> ID ATRIB expression INSEND','atribution',4,'p_atribution_1','proj_nqc_parser.py',209),
  ('atribution -> ID ATRIB cond_expression INSEND','atribution',4,'p_atribution_2','proj_nqc_parser.py',226),
  ('atribution -> indarr ATRIB expression INSEND','atribution',4,'p_atribution_3','proj_nqc_parser.py',241),
  ('indarr -> ID ARRINDL expression ARRINDR','indarr',4,'p_indarr_1','proj_nqc_parser.py',246),
  ('expression -> term','expression',1,'p_expression_1','proj_nqc_parser.py',259),
  ('expression -> expression ad_op term','expression',3,'p_expression_2','proj_nqc_parser.py',262),
  ('term -> factor','term',1,'p_term','proj_nqc_parser.py',266),
  ('term -> term mult_op factor','term',3,'p_term_1','proj_nqc_parser.py',269),
  ('factor -> NUMBER','factor',1,'p_factor','proj_nqc_parser.py',272),
  ('factor -> ID','factor',1,'p_factor_id','proj_nqc_parser.py',275),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_prio','proj_nqc_parser.py',282),
  ('factor -> NOT expression','factor',2,'p_factor_not','proj_nqc_parser.py',285),
  ('factor -> SUB expression','factor',2,'p_factor_sym','proj_nqc_parser.py',288),
  ('factor -> call_function','factor',1,'p_factor_func','proj_nqc_parser.py',291),
  ('factor -> indarr','factor',1,'p_factor_arr','proj_nqc_parser.py',294),
  ('factor -> ADDR expression','factor',2,'p_factor_address','proj_nqc_parser.py',297),
  ('ad_op -> SUM','ad_op',1,'p_ad_op_sum','proj_nqc_parser.py',300),
  ('ad_op -> SUB','ad_op',1,'p_ad_op_sub','proj_nqc_parser.py',303),
  ('mult_op -> MULT','mult_op',1,'p_mult_op_1','proj_nqc_parser.py',313),
  ('mult_op -> DIV','mult_op',1,'p_mult_op_2','proj_nqc_parser.py',316),
  ('mult_op -> MODULO','mult_op',1,'p_mult_op_3','proj_nqc_parser.py',319),
  ('conditionals -> conditional code_logic','conditionals',2,'p_conditionals','proj_nqc_parser.py',332),
  ('conditional -> BLOCK_START WHILE cond_expression cond_code','conditional',4,'p_conditional_while','proj_nqc_parser.py',336),
  ('conditional -> BLOCK_START DO cond_code WHILE cond_expression','conditional',5,'p_conditional_do_while','proj_nqc_parser.py',344),
  ('conditional -> BLOCK_START UNTIL cond_expression cond_code','conditional',4,'p_conditional_until','proj_nqc_parser.py',350),
  ('conditional -> BLOCK_START DO cond_code UNTIL cond_expression','conditional',5,'p_conditional_do_until','proj_nqc_parser.py',358),
  ('conditional -> BLOCK_START IF cond_expression cond_code','conditional',4,'p_conditional_if','proj_nqc_parser.py',364),
  ('conditional -> BLOCK_START IF cond_expression cond_code BLOCK_START ELSE cond_code','conditional',7,'p_conditional_if_else','proj_nqc_parser.py',370),
  ('cond_expression -> LPAREN expression RPAREN','cond_expression',3,'p_cond_expr','proj_nqc_parser.py',378),
  ('cond_expression -> LPAREN cond_expression bool_op cond_expression RPAREN','cond_expression',5,'p_cond_expr_1','proj_nqc_parser.py',381),
  ('bool_op -> EQ','bool_op',1,'p_bool_op_eq','proj_nqc_parser.py',384),
  ('bool_op -> DIF','bool_op',1,'p_bool_op_dif','proj_nqc_parser.py',387),
  ('bool_op -> LEQ','bool_op',1,'p_bool_op_leq','proj_nqc_parser.py',390),
  ('bool_op -> GEQ','bool_op',1,'p_bool_op_geq','proj_nqc_parser.py',393),
  ('bool_op -> LESSER','bool_op',1,'p_bool_op_les','proj_nqc_parser.py',396),
  ('bool_op -> GREATER','bool_op',1,'p_bool_op_gre','proj_nqc_parser.py',399),
  ('bool_op -> CONDAND','bool_op',1,'p_bool_op_and','proj_nqc_parser.py',402),
  ('bool_op -> CONDOR','bool_op',1,'p_bool_op_or','proj_nqc_parser.py',405),
  ('cond_code -> code_logic BLOCK_END','cond_code',2,'p_cond_code','proj_nqc_parser.py',408),
  ('function_calls -> call_function code_logic','function_calls',2,'p_function_calls','proj_nqc_parser.py',411),
  ('call_function -> ID args_lst','call_function',2,'p_call_function','proj_nqc_parser.py',414),
  ('args_lst -> LPAREN RPAREN','args_lst',2,'p_args_lst','proj_nqc_parser.py',417),
  ('args_lst -> LPAREN arg args RPAREN','args_lst',4,'p_args_lst_1','proj_nqc_parser.py',420),
  ('arg -> expression','arg',1,'p_arg','proj_nqc_parser.py',423),
  ('args -> <empty>','args',0,'p_args','proj_nqc_parser.py',426),
  ('args -> ARRCONT arg args','args',3,'p_args_1','proj_nqc_parser.py',429),
  ('func_type -> VOID','func_type',1,'p_func_type_1','proj_nqc_parser.py',433),
  ('func_type -> data_type','func_type',1,'p_func_type_2','proj_nqc_parser.py',437),
  ('data_type -> STR','data_type',1,'p_data_type','proj_nqc_parser.py',441),
  ('data_type -> INT','data_type',1,'p_data_type_1','proj_nqc_parser.py',444),
  ('data_type -> pointer data_type','data_type',2,'p_data_type_2','proj_nqc_parser.py',447),
  ('pointer -> REF','pointer',1,'p_pointer_1','proj_nqc_parser.py',451),
  ('code_end -> RETURN INSEND','code_end',2,'p_code_end_v','proj_nqc_parser.py',455),
  ('code_end -> RETURN expression INSEND','code_end',3,'p_code_end_1','proj_nqc_parser.py',463),
]
